<?php

/**
 * @file
 * An example field using the Field Types API.
 */
 use Drupal\Core\Render\Element;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\file\Entity\File;
 use Drupal\field\FieldStorageConfigInterface;
 use Drupal\field\FieldConfigInterface;
 use Drupal\image\Entity\ImageStyle;
/**
 * @defgroup field_example Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * Providing a field requires:
 * - Defining an entity field item. Entity field items are typed data objects
 *   containing the field values.
 *   - Drupal\field_example\Plugin\Field\FieldType\RgbItem
 * - Defining a field type schema at config/schema/[module_name].schema.yml
 *   - config/schema/field_example.schema.yml
 * - One or more widgets specifying how the field appears in edit forms
 *   - Drupal\field_example\Plugin\Field\TextWidget
 *   - Drupal\field_example\Plugin\Field\Text3Widget
 *   - Drupal\field_example\Plugin\Field\ColorPickerWidgetWidget
 * - One or more formatters specifying how the field appears in displayed
 *   entities
 *   - Drupal\field_example\Plugin\FieldFormatter\SimpleTextFormatter
 *   - Drupal\field_example\Plugin\FieldFormatter\ColorBackgroundFormatter
 *
 * @see field_types
 * @see field
 * @see schemaapi
 *
 * @} End of "defgroup field_example".
 */

/*
'imagefield_crop_widget' => array(
    'render element' => 'element'),
  'imagefield_crop_preview' => array(
    'render element' => 'element',
  ),
*/
 /**
  * Implements hook_theme().
  */
 function field_example_theme() {
   return [
     // Theme functions in image.module.
     'field_example_widget' => [
       // HTML 4 and XHTML 1.0 always require an alt attribute. The HTML 5 draft
       // allows the alt attribute to be omitted in some cases. Therefore,
       // default the alt attribute to an empty string, but allow code using
       // '#theme' => 'field_example_style' to pass explicit NULL for it to be omitted.
       // Usually, neither omission nor an empty string satisfies accessibility
       // requirements, so it is strongly encouraged for code using '#theme' =>
       // 'field_example_style' to pass a meaningful value for the alt variable.
       // - http://www.w3.org/TR/REC-html40/struct/objects.html#h-13.8
       // - http://www.w3.org/TR/xhtml1/dtds.html
       // - http://dev.w3.org/html5/spec/Overview.html#alt
       // The title attribute is optional in all cases, so it is omitted by
       // default.
       'variables' => [
         'style_name' => NULL,
         'uri' => NULL,
         'width' => NULL,
         'height' => NULL,
         'alt' => '',
         'title' => NULL,
         'attributes' => [],
         'cropbox' => [],
         'preview' => [],
         'render element' => 'element',
       ],
     ],
     'field_example_preview' => [
       'render element' => 'element',
       'style_name' => NULL,
       'uri' => NULL,
       'width' => NULL,
       'height' => NULL,
       'alt' => '',
       'title' => NULL,
       'attributes' => [],
     ],
     /*
     // Theme functions in image.admin.inc.
     'field_example_preview' => [
       'variables' => ['style' => NULL],
       'file' => 'image.admin.inc',
     ],
     */
   ];
 }



/**
 * Prepares variables for image style preview templates.
 *
 * Default template: image-style-preview.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - style: \Drupal\image\ImageStyleInterface image style being previewed.
 */
function template_preprocess_field_example_widget(&$variables) {

}

function template_preprocess_field_example_preview(&$variables) {
  $image = [
   '#theme' => 'image',
   '#width' =>  $variables['element']['#width'],
   '#height' => $variables['element']['#height'],
   '#uri' => $variables['element']['#uri'],
   '#attributes' => [
     'alt' => 'jcrop-preview',
      'class' => array('preview-existing', 'jcrop-preview'),
      // 'style' => 'display:none',
    ],
  ];
  // print_r($variables['element']);
  $variables['height'] = $variables['element']['#height'];
  $variables['width'] = $variables['element']['#width'];
  $variables["preview_image"] = $image;
}



function _imagefield_crop_file_to_crop($fid) {
  $query = \Drupal::database()->select('file_usage', 'fu');
  $query->fields('fu', ['fid']);
  $query->condition('fu.id', $fid);
  $query->condition('fu.module', 'imagefield_crop');
  $query->range(0, 1);
  $result = $query->execute()->fetchAssoc();
  if (!empty($result) && isset($result['fid'])) {
    $fid = $result['fid'];
  }
  return file_load($fid);
}

function _field_example_filecrop_add($value) {
  $src = file_load($value['target_id']);
  if(!$src) {
    return ;
  }
  $file_usage = \Drupal::service('file.usage');
  $orig_uri = file_unmanaged_copy($src->uri->value, $src->uri->value);

  // $orig = file_load($fid);
  $orig = clone $src;
  $orig->fid = 0;
  $orig->uri = $orig_uri;
  $orig->filename = basename($orig_uri);
  $orig->status = 1;

  $data = file_get_contents($orig_uri);
  $file = file_save_data($data, $orig_uri, FILE_EXISTS_REPLACE);
  $file_usage->add($file, 'imagefield_crop', 'file', $src->id());

  // crop image
  $image = \Drupal::service('image.factory')->get($orig_uri);
  $image->crop($value["x"], $value["y"], $value["width"], $value["height"]);
  $image->save();
  dpm($value);
}

function _field_example_filecrop_remove($value) {
  $file = _imagefield_crop_file_to_crop($value["target_id"]);
  \Drupal::service('file.usage')->delete($file, 'imagefield_crop', 'file', $value["target_id"]);
  file_delete($file->id());
}

// -1 void()0
// 0 rimove quello vecchio
// 1 field upadte whit new file
function _field_update($new,$old) {
  if(!empty($new) && !empty($old)) {
    if(isset($new["target_id"]) && isset($old["target_id"])) {
      if($new["target_id"] == $old["target_id"]) {
        return -1;
      }
      else {
        return 1;
      }
    }
  }
  else if(empty($new) && !empty($old)) {
    if(isset($old["target_id"])) {
      return 0;
    }
  }
  return -1;
}

function field_example_entity_update($entity) {
  // is fildable.
  if(!is_a($entity, 'Drupal\file\Entity\File')) {
    if(method_exists($entity, 'getFields')) {
      $field = $entity->getFields();
      foreach ($field as $key => $value) {
        if($value->getFieldDefinition()->getType() == "field_example_rgb") {
          $field_name = $value->getName();
          $origin = $entity->original;
          $fileds_old = $origin->get($field_name)->getValue();
          $fileds_update = $entity->get($field_name)->getValue();

          $update_check = array_map("_field_update", $fileds_update ,$fileds_old);
          dpm($update_check);
          foreach($update_check as $i => $value) {
            if ($value == 0) {
              _field_example_filecrop_remove($fileds_old[$i]);
            }
            else if ($value == 1) {
              dpm("update and remove");
              _field_example_filecrop_remove($fileds_old[$i]);
              _field_example_filecrop_add($fileds_update[$i]);
            }
          }

        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Transforms default image of image field from array into single value at save.
 */
function field_example_entity_presave(EntityInterface $entity) {
  // Get the default image settings, return if not saving an image field storage
  // or image field entity.
  $default_image = [];
  if (($entity instanceof FieldStorageConfigInterface || $entity instanceof FieldConfigInterface) && $entity->getType() == 'field_example_rgb') {
    $default_image = $entity->getSetting('default_image');
  }
  else {
    return;
  }

  if ($entity->isSyncing()) {
    return;
  }
  $uuid = $default_image['uuid'];
  if ($uuid) {
    $original_uuid = isset($entity->original) ? $entity->original->getSetting('default_image')['uuid'] : NULL;
    if ($uuid != $original_uuid) {
      $file = \Drupal::entityManager()->loadEntityByUuid('file', $uuid);
      if ($file) {
        $image = \Drupal::service('image.factory')->get($file->getFileUri());
        $default_image['width'] = $image->getWidth();
        $default_image['height'] = $image->getHeight();
      }
      else {
        $default_image['uuid'] = NULL;
      }
    }
  }
  // Both FieldStorageConfigInterface and FieldConfigInterface have a
  // setSetting() method.
  $entity->setSetting('default_image', $default_image);
}



/**
 * Implements hook_ENTITY_TYPE_update() for 'field_storage_config'.
 */
function field_example_field_storage_config_update(FieldStorageConfigInterface $field_storage) {


  //dpm($field_storage->getType());
  if ($field_storage->getType() != 'field_example_rgb') {
    // Only act on image fields.
    return;
  }

  $prior_field_storage = $field_storage->original;

  // The value of a managed_file element can be an array if #extended == TRUE.
  $uuid_new = $field_storage->getSetting('default_image')['uuid'];
  $uuid_old = $prior_field_storage->getSetting('default_image')['uuid'];

  $file_new = $uuid_new ? \Drupal::entityManager()->loadEntityByUuid('file', $uuid_new) : FALSE;

  if ($uuid_new != $uuid_old) {

    // Is there a new file?
    if ($file_new) {
      $file_new->status = FILE_STATUS_PERMANENT;
      $file_new->save();
      \Drupal::service('file.usage')->add($file_new, 'image', 'default_image', $field_storage->uuid());
    }

    // Is there an old file?
    if ($uuid_old && ($file_old = \Drupal::entityManager()->loadEntityByUuid('file', $uuid_old))) {
      \Drupal::service('file.usage')->delete($file_old, 'image', 'default_image', $field_storage->uuid());
    }
  }

  // If the upload destination changed, then move the file.
  if ($file_new && (file_uri_scheme($file_new->getFileUri()) != $field_storage->getSetting('uri_scheme'))) {
    $directory = $field_storage->getSetting('uri_scheme') . '://default_images/';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
    file_move($file_new, $directory . $file_new->filename);
  }

}

/**
 * Implements hook_ENTITY_TYPE_update() for 'field_config'.
 */
function field_example_field_config_update(FieldConfigInterface $field) {

  $prior_instance = $field->original;

  $uuid_new = $field->getSetting('default_image')['uuid'];
  $uuid_old = $prior_instance->getSetting('default_image')['uuid'];

  // If the old and new files do not match, update the default accordingly.
  $file_new = $uuid_new ? \Drupal::entityManager()->loadEntityByUuid('file', $uuid_new) : FALSE;
  if ($uuid_new != $uuid_old) {
    // Save the new file, if present.
    if ($file_new) {
      $file_new->status = FILE_STATUS_PERMANENT;
      $file_new->save();
      \Drupal::service('file.usage')->add($file_new, 'image', 'default_image', $field->uuid());
    }
    // Delete the old file, if present.
    if ($uuid_old && ($file_old = \Drupal::entityManager()->loadEntityByUuid('file', $uuid_old))) {
      \Drupal::service('file.usage')->delete($file_old, 'image', 'default_image', $field->uuid());
    }
  }

/*
  // If the upload destination changed, then move the file.
  if ($file_new && (file_uri_scheme($file_new->getFileUri()) != $field_storage->getSetting('uri_scheme'))) {
    $directory = $field_storage->getSetting('uri_scheme') . '://default_images/';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
    file_move($file_new, $directory . $file_new->filename);
  }
*/
}

/**
 * Implements hook_ENTITY_TYPE_delete() for 'field_storage_config'.
 */
function field_example_field_storage_config_delete(FieldStorageConfigInterface $field) {
  if ($field->getType() != 'field_example_rgb') {
    // Only act on image fields.
    return;
  }

  // The value of a managed_file element can be an array if #extended == TRUE.
  $uuid = $field->getSetting('default_image')['uuid'];
  if ($uuid && ($file = \Drupal::entityManager()->loadEntityByUuid('file', $uuid))) {
    \Drupal::service('file.usage')->delete($file, 'image', 'default_image', $field->uuid());
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for 'field_config'.
 */
function field_example_field_config_delete(FieldConfigInterface $field) {

  $field_storage = $field->getFieldStorageDefinition();
  if ($field_storage->getType() != 'field_example_rgb') {
    // Only act on image fields.
    return;
  }

  // The value of a managed_file element can be an array if #extended == TRUE.
  $uuid = $field->getSetting('default_image')['uuid'];

  // Remove the default image when the instance is deleted.
  if ($uuid && ($file = \Drupal::entityManager()->loadEntityByUuid('file', $uuid))) {
    \Drupal::service('file.usage')->delete($file, 'image', 'default_image', $field->uuid());
  }
}
